{"version":3,"sources":["graphql/params/insertUpdateTodoParams.ts","graphql/queries/todoQueries.ts","graphql/mutations/todoMutations.ts","components/Header.tsx","graphql/subscriptions/todoSubscriptions.ts","components/TodoList.tsx","App.tsx","index.tsx"],"names":["InsertUpdateTodoParams","GET_TODO_LIST","gql","ADD_TODO","Id","Name","DELETE_TODO","SET_EDITING","UPDATE_TODO","HeaderWrapper","styled","div","HeaderTitle","h1","FormStyle","form","LabelStyle","label","Header","todoList","setTodoList","useState","show","setShow","name","setName","useMutation","insertTodo","clearFields","handleClose","addTodo","event","preventDefault","newTodo","id","uuid_v4","editing","visible","variables","Button","variant","onClick","Modal","onHide","closeButton","Title","Body","onSubmit","value","onChange","target","Footer","TODO_CHANGED","TodoListStyle","TodoListItem","TodoListInput","input","TodoListButton","TodoList","data","useSubscription","deleteMutation","setEditingMutation","updateTodoMutation","useEffect","todoChanged","type","addedTodo","filter","todo","length","updatedTodo","checkTodo","map","deletedTodo","reduce","prev","curr","info","editingTodo","setEditingTodo","setEditing","editTodo","onNameChange","updateTodo","elem","Fragment","disabled","TodoWrapper","App","useQuery","loading","error","typedTodoList","getTodoList","console","log","httpLink","createHttpLink","uri","wsLink","WebSocketLink","options","reconnect","splitLink","split","query","definition","getMainDefinition","kind","operation","authLink","setContext","_","headers","process","client","ApolloClient","link","concat","cache","InMemoryCache","ReactDOM","render","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.219edf73.chunk.js","sourcesContent":["export enum InsertUpdateTodoParams {\r\n  Id = 'id',\r\n  Name = 'name'\r\n}","import gql from 'graphql-tag';\r\n\r\nexport const GET_TODO_LIST = gql`\r\n  query GetTodoList {\r\n    getTodoList {\r\n      id\r\n      name\r\n      editing\r\n      complete\r\n    }\r\n  }\r\n`;\r\n","import gql from 'graphql-tag';\r\nimport { InsertUpdateTodoParams } from '../params/insertUpdateTodoParams';\r\n\r\nexport const ADD_TODO = gql`\r\n  mutation addTodo(\r\n    $${InsertUpdateTodoParams.Id}: String!,\r\n    $${InsertUpdateTodoParams.Name}: String!\r\n  ) {\r\n    addTodo(todo: {\r\n      id: $${InsertUpdateTodoParams.Id},\r\n      name: $${InsertUpdateTodoParams.Name}\r\n    }) {\r\n      id\r\n      name\r\n      editing\r\n      complete\r\n    }\r\n  }\r\n`;\r\n\r\nexport const DELETE_TODO = gql`\r\n  mutation deleteTodo($id: String!) {\r\n    deleteTodo(id: $id) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nexport const SET_EDITING = gql`\r\n  mutation setEditing($id: String!, $editing: Boolean!) {\r\n    setEditing(id: $id, editing: $editing) {\r\n      id\r\n      name\r\n      editing\r\n      complete\r\n    }\r\n  }\r\n`;\r\n\r\nexport const UPDATE_TODO = gql`\r\n  mutation updateTodo(\r\n    $${InsertUpdateTodoParams.Id}: String!,\r\n    $${InsertUpdateTodoParams.Name}: String!\r\n  ) {\r\n    updateTodo(todo: {\r\n      id: $${InsertUpdateTodoParams.Id},\r\n      name: $${InsertUpdateTodoParams.Name}\r\n    }) {\r\n      id\r\n      name\r\n      editing\r\n      complete\r\n    }\r\n  }\r\n`;","import React, { useState } from 'react';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { Todo, TodoStateInterface } from '../todo-interface';\r\nimport { v4 as uuid_v4 } from 'uuid';\r\nimport { useMutation } from '@apollo/client';\r\nimport { ADD_TODO } from '../graphql/mutations/todoMutations';\r\nimport { InsertUpdateTodoParams } from '../graphql/params/insertUpdateTodoParams';\r\nimport styled from 'styled-components';\r\n\r\nconst HeaderWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  background-color: lightblue;\r\n  padding: 5px;\r\n`\r\n\r\nconst HeaderTitle = styled.h1`\r\n  font-size: 24px;\r\n  margin: 0px;\r\n`\r\n\r\nconst FormStyle = styled.form`\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst LabelStyle = styled.label`\r\n  width: 10%;\r\n  margin: 0px 5px;\r\n`\r\n\r\nconst Header: React.FC<TodoStateInterface> = ({ todoList, setTodoList }) => {\r\n  const [show, setShow] = useState(false);\r\n  const [name, setName] = useState('');\r\n  const [insertTodo] = useMutation(ADD_TODO);\r\n\r\n  const clearFields = () => setName('')\r\n\r\n  const handleClose = () => {\r\n    setShow(false);\r\n    clearFields();\r\n  }\r\n  const handleShow = () => setShow(true)\r\n\r\n  const onNameChange = (event: React.ChangeEvent<HTMLInputElement>) => setName(event.target.value)\r\n  \r\n  const addTodo = (event: React.SyntheticEvent) => {\r\n    event.preventDefault();\r\n    let newTodo: Todo = {\r\n      id: uuid_v4(),\r\n      name: name,\r\n      editing: false,\r\n      visible: true\r\n    };\r\n    insertTodo({\r\n      variables: {\r\n        [InsertUpdateTodoParams.Id]: newTodo.id,\r\n        [InsertUpdateTodoParams.Name]: newTodo.name\r\n      }\r\n    });\r\n    clearFields();\r\n    setTodoList([...todoList, newTodo]);\r\n    setShow(false);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <HeaderWrapper>\r\n        <HeaderTitle>Todo List</HeaderTitle>\r\n        <Button variant=\"primary\" onClick={handleShow}>Add Todo</Button>\r\n      </HeaderWrapper>\r\n      <Modal show={show} onHide={handleClose}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Add Todo</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <FormStyle onSubmit={addTodo}>\r\n            <LabelStyle>Name</LabelStyle>\r\n            <input value={name} onChange={onNameChange}/>\r\n          </FormStyle>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={handleClose}>\r\n            Cancel\r\n          </Button>\r\n          <Button variant=\"primary\" onClick={addTodo}>\r\n            Add\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  )\r\n};\r\n\r\nexport default Header;","import gql from 'graphql-tag';\r\n\r\nexport const TODO_CHANGED = gql`\r\n  subscription TodoChanged {\r\n    todoChanged {\r\n      type\r\n      data {\r\n        id\r\n        name\r\n        editing\r\n        complete\r\n      }\r\n    }\r\n  }\r\n`;","import React, { useState, useEffect } from 'react';\r\nimport { Todo, TodoStateInterface } from '../todo-interface';\r\nimport { useMutation, useSubscription } from '@apollo/client';\r\nimport { DELETE_TODO, SET_EDITING, UPDATE_TODO } from '../graphql/mutations/todoMutations';\r\nimport { TODO_CHANGED } from '../graphql/subscriptions/todoSubscriptions';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { PencilSquare, Trash, Check, X } from 'react-bootstrap-icons';\r\n\r\nimport styled from 'styled-components';\r\n\r\nconst TodoListStyle = styled.div`\r\n  border: 0.5px solid lightblue;\r\n  background-color: aliceblue;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`;\r\n\r\nconst TodoListItem = styled(TodoListStyle)`\r\n  border-style: none;\r\n  text-align: start;\r\n  width: 90%;\r\n  margin: 0px 0px 0px 9px;\r\n  font-size: 14px;\r\n`;\r\n\r\nconst TodoListInput = styled.input`\r\n  text-align: start;\r\n  width: 90%;\r\n  margin: 5px;\r\n  font-size: 14px;\r\n`;\r\n\r\nconst TodoListButton = styled(Button)`\r\n  margin: 5px;\r\n`\r\n\r\nconst TodoList: React.FC<TodoStateInterface> = ({ todoList, setTodoList }) => {\r\n  const { data } = useSubscription(TODO_CHANGED);\r\n  const [deleteMutation] = useMutation(DELETE_TODO);\r\n  const [setEditingMutation] = useMutation(SET_EDITING);\r\n  const [updateTodoMutation] = useMutation(UPDATE_TODO);\r\n\r\n  // Enable multiple clients because subscription will update client if mutation did not manually update local state\r\n  useEffect(() => {\r\n    if (!data) return;\r\n    if (data.todoChanged.type === 'ADD') {\r\n      let addedTodo: Todo = data.todoChanged.data;\r\n      if (todoList.filter(todo => todo.id === addedTodo.id).length === 0) setTodoList([...todoList, addedTodo]);\r\n    }\r\n    else if (data.todoChanged.type === 'UPDATE') {\r\n      let updatedTodo: Todo = data.todoChanged.data;\r\n      let checkTodo = todoList.filter(todo => todo.id === updatedTodo.id)[0];\r\n      if (updatedTodo.name !== checkTodo.name) {\r\n        setTodoList(todoList.map(todo => todo.id === updatedTodo.id ? { id: updatedTodo.id, name: updatedTodo.name, editing: false, visible: true } : todo));\r\n      }\r\n    }\r\n    else if (data.todoChanged.type === 'DELETE') {\r\n      let deletedTodo: Todo = data.todoChanged.data;\r\n      if (todoList.filter(todo => todo.id === deletedTodo.id).length === 1) setTodoList(todoList.filter(todo => todo.id !== deletedTodo.id));\r\n    }\r\n  }, [data, todoList, setTodoList]);\r\n\r\n  // Find out whether a todo is previously being edited\r\n  const getPreviouslyEditingTodo = () => {\r\n    return todoList.length > 0 ? todoList.reduce((prev, curr) => {\r\n      return prev.editing ? prev : curr.editing ? curr : { id: '', name: '', info: '', editing: false, visible: true };\r\n    }) : { id: \"\", name: \"\", info: \"\", editing: false, visible: true };\r\n  }\r\n  const [editingTodo, setEditingTodo] = useState(getPreviouslyEditingTodo());\r\n  const [editing, setEditing] = useState(false);\r\n\r\n  const deleteTodo = (id: string) => {\r\n    deleteMutation({ variables: { id: id }});\r\n    setTodoList(todoList.filter(todo => todo.id !== id));\r\n  }\r\n\r\n  const editTodo = (id: string, editing: boolean) => {\r\n    setEditing(editing);\r\n    setEditingMutation({ variables: { id: id, editing: editing }});\r\n    // Destructure object because we cannot directly change values in the state\r\n    setTodoList(todoList.map(todo => {\r\n      if (todo.id === id) {\r\n        let newTodo = { ...todo, editing: editing };\r\n        setEditingTodo(newTodo);\r\n        return newTodo;\r\n      }\r\n      return todo;\r\n    }));\r\n  }\r\n\r\n  const onNameChange = (event: React.ChangeEvent<HTMLInputElement>) => setEditingTodo({ ...editingTodo, name: event.target.value })\r\n\r\n  const updateTodo = () => {\r\n    updateTodoMutation({ variables: { id: editingTodo.id, name: editingTodo.name }});\r\n    setTodoList(todoList.map(todo => todo.id === editingTodo.id ? { id: editingTodo.id, name: editingTodo.name, editing: false, visible: true } : todo));\r\n    setEditing(false);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {todoList.map((elem: Todo) => \r\n        elem.visible ?\r\n        !elem.editing ? (\r\n          <React.Fragment key={elem.id}>\r\n            <TodoListStyle>\r\n              <TodoListItem>{elem.name}</TodoListItem>\r\n              <TodoListButton variant=\"secondary\" onClick={() => editTodo(elem.id, true)} disabled={editing}><PencilSquare/></TodoListButton>\r\n              <TodoListButton variant=\"secondary\" onClick={() => deleteTodo(elem.id)}><Trash/></TodoListButton>\r\n            </TodoListStyle>\r\n          </React.Fragment>\r\n        ) : \r\n        (\r\n          <React.Fragment key={elem.id}>\r\n            <TodoListStyle>\r\n              <TodoListInput value={editingTodo.name} onChange={onNameChange}></TodoListInput>\r\n              <TodoListButton variant=\"secondary\" onClick={() => editTodo(elem.id, false)}><X/></TodoListButton>\r\n              <TodoListButton variant=\"primary\" onClick={updateTodo}><Check/></TodoListButton>\r\n            </TodoListStyle>\r\n          </React.Fragment>\r\n        )\r\n        : <React.Fragment key={elem.id}></React.Fragment>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TodoList;","import React, { useState } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { GET_TODO_LIST } from './graphql/queries/todoQueries';\nimport { Todo } from './todo-interface';\n\nimport Header from './components/Header';\nimport TodoList from './components/TodoList';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport styled from 'styled-components';\n\nconst TodoWrapper = styled.div`\n  max-width: 1000px;\n  margin: auto;\n`\n\nconst App: React.FC = () => {\n  const { loading, error, data, } = useQuery(GET_TODO_LIST);\n  let typedTodoList: Todo[] = data ? data.getTodoList : null;\n  const [todoList, setTodoList] = useState(typedTodoList);\n  if (loading) return <p>Loading...</p>\n  if (error) {\n    console.log(error);\n    return <p>Error</p>\n  }\n  // If console log, notice the first iteration returns data as null, so do a single setState\n  if (data && !todoList) {\n      setTodoList(typedTodoList.map(todo => { return { ...todo, visible: true } }));\n  }\n\n  return (\n    <TodoWrapper>\n      <Header todoList={todoList} setTodoList={setTodoList}/>\n      <TodoList todoList={todoList} setTodoList={setTodoList}/>\n    </TodoWrapper>\n  );\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\r\nimport { split, ApolloClient, ApolloProvider, createHttpLink, InMemoryCache } from '@apollo/client';\r\nimport { WebSocketLink } from '@apollo/client/link/ws';\r\nimport { setContext } from '@apollo/client/link/context';\r\nimport App from './App';\r\nimport { getMainDefinition } from '@apollo/client/utilities';\r\n\r\nconst httpLink = createHttpLink({ uri: 'https://todo-app-server-expanded.herokuapp.com/graphql' });\r\nconst wsLink = new WebSocketLink({\r\n  uri: 'wss://todo-app-server-expanded.herokuapp.com/graphql',\r\n  options: {\r\n    reconnect: true\r\n  }\r\n});\r\n\r\nconst splitLink = split(\r\n  ({ query }) => {\r\n    const definition = getMainDefinition(query);\r\n    return (\r\n      definition.kind === 'OperationDefinition' &&\r\n      definition.operation === 'subscription'\r\n    );\r\n  },\r\n  wsLink,\r\n  httpLink\r\n);\r\n\r\nconst authLink = setContext((_, { headers }) => {\r\n  return {\r\n    headers: {\r\n      ...headers,\r\n      'Authorization': process.env.REACT_APP_TOKEN\r\n    }\r\n  }\r\n});\r\n\r\nconst client = new ApolloClient({\r\n  link: authLink.concat(splitLink),\r\n  cache: new InMemoryCache()\r\n});\r\n\r\nReactDOM.render(\r\n  <ApolloProvider client={client}>\r\n    <App />\r\n  </ApolloProvider>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}