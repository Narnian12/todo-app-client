{"version":3,"sources":["graphql/params/insertTodoParams.ts","graphql/queries/todoQueries.ts","graphql/mutations/todoMutations.ts","components/header/Header.tsx","components/todoList/TodoList.tsx","App.tsx","index.tsx"],"names":["InsertTodoParams","GET_TODO_LIST","gql","ADD_TODO","Id","Name","Info","DELETE_TODO","Header","todoList","setTodoList","useState","show","setShow","name","setName","info","setInfo","useMutation","insertTodo","clearFields","handleClose","Button","variant","onClick","Modal","onHide","closeButton","Title","Body","className","value","onChange","event","target","Footer","preventDefault","newTodo","id","uuid_v4","variables","TodoList","deleteMutation","map","elem","filter","todo","App","useQuery","loading","error","data","typedTodoList","getTodoList","console","log","httpLink","createHttpLink","uri","authLink","setContext","_","headers","process","client","ApolloClient","link","concat","cache","InMemoryCache","ReactDOM","render","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.b5ab1925.chunk.js","sourcesContent":["export enum InsertTodoParams {\r\n  Id = 'id',\r\n  Name = 'name',\r\n  Info = 'info'\r\n}","import gql from 'graphql-tag';\r\n\r\nexport const GET_TODO_LIST = gql`\r\n  query GetTodoList {\r\n    getTodoList {\r\n      id\r\n      name\r\n      info\r\n    }\r\n  }\r\n`;\r\n","import gql from 'graphql-tag';\r\nimport { InsertTodoParams } from '../params/insertTodoParams';\r\n\r\nexport const ADD_TODO = gql`\r\n  mutation addTodo(\r\n    $${InsertTodoParams.Id}: String!,\r\n    $${InsertTodoParams.Name}: String!,\r\n    $${InsertTodoParams.Info}: String\r\n  ) {\r\n    addTodo(todo: {\r\n      id: $${InsertTodoParams.Id},\r\n      name: $${InsertTodoParams.Name},\r\n      info: $${InsertTodoParams.Info}\r\n    }) {\r\n      id\r\n      name\r\n      info\r\n    }\r\n  }\r\n`;\r\n\r\nexport const DELETE_TODO = gql`\r\n  mutation deleteTodo($id: String!) {\r\n    deleteTodo(id: $id)\r\n  }\r\n`;","import React, { useState } from 'react';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { Todo, TodoStateInterface } from '../../todo-interface';\r\nimport { v4 as uuid_v4 } from 'uuid';\r\nimport { useMutation } from '@apollo/client';\r\nimport { ADD_TODO } from '../../graphql/mutations/todoMutations';\r\nimport { InsertTodoParams } from '../../graphql/params/insertTodoParams';\r\n\r\nimport './Header.css';\r\n\r\nconst Header: React.FC<TodoStateInterface> = ({ todoList, setTodoList }) => {\r\n  const [show, setShow] = useState(false);\r\n  const [name, setName] = useState('');\r\n  const [info, setInfo] = useState('');\r\n  const [insertTodo] = useMutation(ADD_TODO);\r\n\r\n  const clearFields = () => {\r\n    setName('');\r\n    setInfo('');\r\n  }\r\n\r\n  const handleClose = () => {\r\n    setShow(false);\r\n    clearFields();\r\n  }\r\n  const handleShow = () => setShow(true)\r\n\r\n  const onNameChange = (event: React.ChangeEvent<HTMLInputElement>) => setName(event.target.value)\r\n  const onInfoChange = (event: React.ChangeEvent<HTMLInputElement>) => setInfo(event.target.value)\r\n  \r\n  const addTodo = (event: React.SyntheticEvent) => {\r\n    event.preventDefault();\r\n    let newTodo: Todo = {\r\n      id: uuid_v4(),\r\n      name: name,\r\n      info: info\r\n    };\r\n    insertTodo({\r\n      variables: {\r\n        [InsertTodoParams.Id]: newTodo.id,\r\n        [InsertTodoParams.Name]: newTodo.name,\r\n        [InsertTodoParams.Info]: newTodo.info\r\n      }\r\n    });\r\n    clearFields();\r\n    setTodoList([...todoList, newTodo]);\r\n    setShow(false);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <h1>Todo List Client</h1>\r\n      <Button variant=\"primary\" onClick={handleShow}>Add Todo</Button>\r\n      <Modal show={show} onHide={handleClose}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Add Todo</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <form className=\"add\">\r\n            <label>Name</label>\r\n            <input value={name} onChange={onNameChange}/>\r\n            <label>Info</label>\r\n            <input value={info} onChange={onInfoChange}/>\r\n          </form>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={handleClose}>\r\n            Cancel\r\n          </Button>\r\n          <Button variant=\"primary\" onClick={addTodo}>\r\n            Add\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  )\r\n};\r\n\r\nexport default Header;","import React from 'react';\r\nimport { Todo, TodoStateInterface } from '../../todo-interface';\r\nimport { useMutation } from '@apollo/client';\r\nimport { DELETE_TODO } from '../../graphql/mutations/todoMutations';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nimport './TodoList.css';\r\n\r\nconst TodoList: React.FC<TodoStateInterface> = ({ todoList, setTodoList }) => {\r\n  const [deleteMutation] = useMutation(DELETE_TODO);\r\n\r\n  const deleteTodo = (id: string) => {\r\n    deleteMutation({ variables: { id: id }});\r\n    setTodoList(todoList.filter(todo => todo.id !== id));\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"todoList header\">\r\n        <div>Name</div>\r\n        <div>Info</div>\r\n      </div>\r\n      {todoList.map((elem: Todo) => {\r\n        return (\r\n          <div className=\"todoList\" key={elem.id}>\r\n            <div>{elem.name}</div>\r\n            <div>{elem.info}</div>\r\n            <Button variant=\"secondary\" onClick={() => deleteTodo(elem.id)}>x</Button>\r\n          </div>\r\n        )\r\n      })}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TodoList;","import React, { useState } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { GET_TODO_LIST } from './graphql/queries/todoQueries';\nimport { Todo } from './todo-interface';\n\nimport Header from './components/header/Header';\nimport TodoList from './components/todoList/TodoList';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst App: React.FC = () => {\n  const { loading, error, data, } = useQuery(GET_TODO_LIST);\n  let typedTodoList: Todo[] = data ? data.getTodoList : null;\n  const [todoList, setTodoList] = useState(typedTodoList);\n  if (loading) return <p>Loading...</p>\n  if (error) {\n    console.log(error);\n    return <p>Error</p>\n  }\n  // If console log, notice the first iteration returns data as null, so do a single setState\n  if (data && !todoList) setTodoList(typedTodoList);\n\n  return (\n    <div className=\"App\">\n      <Header todoList={todoList} setTodoList={setTodoList}/>\n      <TodoList todoList={todoList} setTodoList={setTodoList}/>\n    </div>\n  );\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport './index.css';\nimport { ApolloClient, ApolloProvider, createHttpLink, InMemoryCache } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport App from './App';\n\nconst httpLink = createHttpLink({ uri: 'https://ps-todo-app-server.herokuapp.com/' });\n\nconst authLink = setContext((_, { headers }) => {\n  return {\n    headers: {\n      ...headers,\n      'Authorization': process.env.REACT_APP_TOKEN\n    }\n  }\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache()\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}