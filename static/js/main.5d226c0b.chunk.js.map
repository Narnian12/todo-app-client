{"version":3,"sources":["graphql/params/insertUpdateTodoParams.ts","graphql/queries/todoQueries.ts","graphql/mutations/todoMutations.ts","components/Header.tsx","graphql/subscriptions/todoSubscriptions.ts","components/TodoList.tsx","App.tsx","index.tsx"],"names":["InsertUpdateTodoParams","GET_TODO_LIST","gql","ADD_TODO","Id","Name","DELETE_TODO","SET_EDITING","SET_COMPLETE","UPDATE_TODO","HeaderWrapper","styled","div","HeaderTitle","h1","FormStyle","form","LabelStyle","label","InputStyle","input","Header","todoList","setTodoList","useState","show","setShow","name","setName","useMutation","insertTodo","clearFields","handleClose","addTodo","event","preventDefault","newTodo","id","uuid_v4","editing","visible","complete","variables","Button","variant","onClick","Modal","onHide","closeButton","Title","Body","onSubmit","value","onChange","target","Footer","TODO_CHANGED","TodoListStyle","TodoListCheckbox","TodoListItem","props","TodoListInput","TodoListButton","TodoList","data","useSubscription","deleteMutation","setEditingMutation","setCompleteMutation","updateTodoMutation","useEffect","todoChanged","type","addedTodo","filter","todo","length","updatedTodo","checkTodo","map","deletedTodo","completeChangedTodo","find","reduce","prev","curr","info","editingTodo","setEditingTodo","setEditing","editTodo","onNameChange","updateTodo","elem","Fragment","checked","changedTodo","changeComplete","disabled","TodoWrapper","App","useQuery","loading","error","typedTodoList","getTodoList","console","log","httpLink","createHttpLink","uri","wsLink","WebSocketLink","options","reconnect","splitLink","split","query","definition","getMainDefinition","kind","operation","authLink","setContext","_","headers","process","client","ApolloClient","link","concat","cache","InMemoryCache","ReactDOM","render","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.5d226c0b.chunk.js","sourcesContent":["export enum InsertUpdateTodoParams {\r\n  Id = 'id',\r\n  Name = 'name'\r\n}","import gql from 'graphql-tag';\r\n\r\nexport const GET_TODO_LIST = gql`\r\n  query GetTodoList {\r\n    getTodoList {\r\n      id\r\n      name\r\n      editing\r\n      complete\r\n    }\r\n  }\r\n`;\r\n","import gql from 'graphql-tag';\r\nimport { InsertUpdateTodoParams } from '../params/insertUpdateTodoParams';\r\n\r\nexport const ADD_TODO = gql`\r\n  mutation addTodo(\r\n    $${InsertUpdateTodoParams.Id}: String!,\r\n    $${InsertUpdateTodoParams.Name}: String!\r\n  ) {\r\n    addTodo(todo: {\r\n      id: $${InsertUpdateTodoParams.Id},\r\n      name: $${InsertUpdateTodoParams.Name}\r\n    }) {\r\n      id\r\n      name\r\n      editing\r\n      complete\r\n    }\r\n  }\r\n`;\r\n\r\nexport const DELETE_TODO = gql`\r\n  mutation deleteTodo($id: String!) {\r\n    deleteTodo(id: $id) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nexport const SET_EDITING = gql`\r\n  mutation setEditing($id: String!, $editing: Boolean!) {\r\n    setEditing(id: $id, editing: $editing) {\r\n      id\r\n      name\r\n      editing\r\n      complete\r\n    }\r\n  }\r\n`;\r\n\r\nexport const SET_COMPLETE = gql`\r\n  mutation setComplete($id: String!, $complete: Boolean!) {\r\n    setComplete(id: $id, complete: $complete) {\r\n      id\r\n      name\r\n      editing\r\n      complete\r\n    }\r\n  }\r\n`\r\n\r\nexport const UPDATE_TODO = gql`\r\n  mutation updateTodo(\r\n    $${InsertUpdateTodoParams.Id}: String!,\r\n    $${InsertUpdateTodoParams.Name}: String!\r\n  ) {\r\n    updateTodo(todo: {\r\n      id: $${InsertUpdateTodoParams.Id},\r\n      name: $${InsertUpdateTodoParams.Name}\r\n    }) {\r\n      id\r\n      name\r\n      editing\r\n      complete\r\n    }\r\n  }\r\n`;","import React, { useState } from 'react';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { Todo, TodoStateInterface } from '../todo-interface';\r\nimport { v4 as uuid_v4 } from 'uuid';\r\nimport { useMutation } from '@apollo/client';\r\nimport { ADD_TODO } from '../graphql/mutations/todoMutations';\r\nimport { InsertUpdateTodoParams } from '../graphql/params/insertUpdateTodoParams';\r\nimport styled from 'styled-components';\r\n\r\nconst HeaderWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  background-color: lightblue;\r\n  padding: 5px;\r\n`\r\n\r\nconst HeaderTitle = styled.h1`\r\n  font-size: 24px;\r\n  margin: 0px;\r\n`\r\n\r\nconst FormStyle = styled.form`\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst LabelStyle = styled.label`\r\n  width: 15%;\r\n  margin: 5px;\r\n`\r\n\r\nconst InputStyle = styled.input`\r\n  width: 100%;\r\n`\r\n\r\nconst Header: React.FC<TodoStateInterface> = ({ todoList, setTodoList }) => {\r\n  const [show, setShow] = useState(false);\r\n  const [name, setName] = useState('');\r\n  const [insertTodo] = useMutation(ADD_TODO);\r\n\r\n  const clearFields = () => setName('')\r\n\r\n  const handleClose = () => {\r\n    setShow(false);\r\n    clearFields();\r\n  }\r\n  const handleShow = () => setShow(true)\r\n\r\n  const onNameChange = (event: React.ChangeEvent<HTMLInputElement>) => setName(event.target.value)\r\n  \r\n  const addTodo = (event: React.SyntheticEvent) => {\r\n    event.preventDefault();\r\n    let newTodo: Todo = {\r\n      id: uuid_v4(),\r\n      name: name,\r\n      editing: false,\r\n      visible: true,\r\n      complete: false\r\n    };\r\n    insertTodo({\r\n      variables: {\r\n        [InsertUpdateTodoParams.Id]: newTodo.id,\r\n        [InsertUpdateTodoParams.Name]: newTodo.name\r\n      }\r\n    });\r\n    clearFields();\r\n    setTodoList([...todoList, newTodo]);\r\n    setShow(false);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <HeaderWrapper>\r\n        <HeaderTitle>Todo List</HeaderTitle>\r\n        <Button variant=\"primary\" onClick={handleShow}>Add Todo</Button>\r\n      </HeaderWrapper>\r\n      <Modal show={show} onHide={handleClose}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Add Todo</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <FormStyle onSubmit={addTodo}>\r\n            <LabelStyle>Name</LabelStyle>\r\n            <InputStyle value={name} onChange={onNameChange}/>\r\n          </FormStyle>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={handleClose}>\r\n            Cancel\r\n          </Button>\r\n          <Button variant=\"primary\" onClick={addTodo}>\r\n            Add\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  )\r\n};\r\n\r\nexport default Header;","import gql from 'graphql-tag';\r\n\r\nexport const TODO_CHANGED = gql`\r\n  subscription TodoChanged {\r\n    todoChanged {\r\n      type\r\n      data {\r\n        id\r\n        name\r\n        editing\r\n        complete\r\n      }\r\n    }\r\n  }\r\n`;","import React, { useState, useEffect } from 'react';\r\nimport { Todo, TodoStateInterface } from '../todo-interface';\r\nimport { useMutation, useSubscription } from '@apollo/client';\r\nimport { DELETE_TODO, SET_EDITING, SET_COMPLETE, UPDATE_TODO } from '../graphql/mutations/todoMutations';\r\nimport { TODO_CHANGED } from '../graphql/subscriptions/todoSubscriptions';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { PencilSquare, Trash, Check, X } from 'react-bootstrap-icons';\r\n\r\nimport styled from 'styled-components';\r\n\r\nconst TodoListStyle = styled.div`\r\n  border: 0.5px solid lightblue;\r\n  background-color: aliceblue;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`;\r\n\r\nconst TodoListCheckbox = styled.input`\r\n  margin: 5px;\r\n`;\r\n\r\ntype TodoListItemStyle = {\r\n  complete: boolean\r\n};\r\n\r\nconst TodoListItem = styled(TodoListStyle)`\r\n  border-style: none;\r\n  text-align: start;\r\n  width: 90%;\r\n  margin: 0px 0px 0px 9px;\r\n  font-size: 14px;\r\n  text-decoration: ${(props: TodoListItemStyle) => props.complete ? \"line-through\" : \"none\"};\r\n`;\r\n\r\nconst TodoListInput = styled.input`\r\n  text-align: start;\r\n  width: 90%;\r\n  margin: 5px;\r\n  font-size: 14px;\r\n`;\r\n\r\nconst TodoListButton = styled(Button)`\r\n  margin: 5px;\r\n`\r\n\r\nconst TodoList: React.FC<TodoStateInterface> = ({ todoList, setTodoList }) => {\r\n  const { data } = useSubscription(TODO_CHANGED);\r\n  const [deleteMutation] = useMutation(DELETE_TODO);\r\n  const [setEditingMutation] = useMutation(SET_EDITING);\r\n  const [setCompleteMutation] = useMutation(SET_COMPLETE);\r\n  const [updateTodoMutation] = useMutation(UPDATE_TODO);\r\n\r\n  // Enable multiple clients because subscription will update client if mutation did not manually update local state\r\n  useEffect(() => {\r\n    if (!data) return;\r\n    if (data.todoChanged.type === 'ADD') {\r\n      let addedTodo: Todo = data.todoChanged.data;\r\n      if (todoList.filter(todo => todo.id === addedTodo.id).length === 0) setTodoList([...todoList, addedTodo]);\r\n    }\r\n    else if (data.todoChanged.type === 'UPDATE') {\r\n      let updatedTodo: Todo = data.todoChanged.data;\r\n      let checkTodo = todoList.filter(todo => todo.id === updatedTodo.id)[0];\r\n      if (updatedTodo.name !== checkTodo.name) {\r\n        setTodoList(todoList.map(todo => todo.id === updatedTodo.id ? { id: updatedTodo.id, name: updatedTodo.name, editing: false, visible: true, complete: false } : todo));\r\n      }\r\n    }\r\n    else if (data.todoChanged.type === 'DELETE') {\r\n      let deletedTodo: Todo = data.todoChanged.data;\r\n      if (todoList.filter(todo => todo.id === deletedTodo.id).length === 1) setTodoList(todoList.filter(todo => todo.id !== deletedTodo.id));\r\n    }\r\n    else if (data.todoChanged.type === 'COMPLETE') {\r\n      let completeChangedTodo: Todo = data.todoChanged.data;\r\n      if (todoList.find((todo: Todo) => todo.id === completeChangedTodo.id)?.complete !== completeChangedTodo.complete) {\r\n        setTodoList(todoList.map(todo => todo.id === completeChangedTodo.id ? { ...todo, complete: !todo.complete } : todo ));\r\n      }\r\n    }\r\n    data.todoChanged.type = 'NONE';\r\n  }, [data, todoList, setTodoList]);\r\n\r\n  // Find out whether a todo is previously being edited\r\n  const getPreviouslyEditingTodo = () => {\r\n    return todoList.length > 0 ? todoList.reduce((prev, curr) => {\r\n      return prev.editing ? prev : curr.editing ? curr : { id: '', name: '', info: '', editing: false, visible: true, complete: false };\r\n    }) : { id: \"\", name: \"\", info: \"\", editing: false, visible: true, complete: false };\r\n  }\r\n  const [editingTodo, setEditingTodo] = useState(getPreviouslyEditingTodo());\r\n  const [editing, setEditing] = useState(false);\r\n\r\n  const deleteTodo = (id: string) => {\r\n    deleteMutation({ variables: { id: id }});\r\n    setTodoList(todoList.filter(todo => todo.id !== id));\r\n  }\r\n\r\n  const editTodo = (id: string, editing: boolean) => {\r\n    setEditing(editing);\r\n    setEditingMutation({ variables: { id: id, editing: editing }});\r\n    // Destructure object because we cannot directly change values in the state\r\n    setTodoList(todoList.map(todo => {\r\n      if (todo.id === id) {\r\n        let newTodo = { ...todo, editing: editing };\r\n        setEditingTodo(newTodo);\r\n        return newTodo;\r\n      }\r\n      return todo;\r\n    }));\r\n  }\r\n\r\n  const onNameChange = (event: React.ChangeEvent<HTMLInputElement>) => setEditingTodo({ ...editingTodo, name: event.target.value })\r\n\r\n  const updateTodo = () => {\r\n    updateTodoMutation({ variables: { id: editingTodo.id, name: editingTodo.name }});\r\n    setTodoList(todoList.map(todo => todo.id === editingTodo.id ? { id: editingTodo.id, name: editingTodo.name, editing: false, visible: true, complete: false } : todo));\r\n    setEditing(false);\r\n  }\r\n\r\n  const changeComplete = (id: string) => {\r\n    let changedTodo = todoList.find((elem: Todo) => elem.id === id);\r\n    setCompleteMutation({ variables: { id: id, complete: !changedTodo?.complete}});\r\n    setTodoList(todoList.map(todo => todo.id === changedTodo?.id ? { ...changedTodo, complete: !changedTodo?.complete } : todo));\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {todoList.map((elem: Todo) => \r\n        !elem.editing ? (\r\n          <React.Fragment key={elem.id}>\r\n            <TodoListStyle>\r\n              <TodoListCheckbox type=\"checkbox\" checked={elem.complete} onChange={() => changeComplete(elem.id)}/>\r\n              <TodoListItem complete={elem.complete}>{elem.name}</TodoListItem>\r\n              <TodoListButton variant=\"secondary\" onClick={() => editTodo(elem.id, true)} disabled={editing || elem.complete}><PencilSquare/></TodoListButton>\r\n              <TodoListButton variant=\"secondary\" onClick={() => deleteTodo(elem.id)}><Trash/></TodoListButton>\r\n            </TodoListStyle>\r\n          </React.Fragment>\r\n        ) : \r\n        (\r\n          <React.Fragment key={elem.id}>\r\n            <TodoListStyle>\r\n              <TodoListInput value={editingTodo.name} onChange={onNameChange}></TodoListInput>\r\n              <TodoListButton variant=\"secondary\" onClick={() => editTodo(elem.id, false)}><X/></TodoListButton>\r\n              <TodoListButton variant=\"primary\" onClick={updateTodo}><Check/></TodoListButton>\r\n            </TodoListStyle>\r\n          </React.Fragment>\r\n        )\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TodoList;","import React, { useState } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { GET_TODO_LIST } from './graphql/queries/todoQueries';\nimport { Todo } from './todo-interface';\n\nimport Header from './components/Header';\nimport TodoList from './components/TodoList';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport styled from 'styled-components';\n\nconst TodoWrapper = styled.div`\n  max-width: 1000px;\n  margin: auto;\n`\n\nconst App: React.FC = () => {\n  const { loading, error, data, } = useQuery(GET_TODO_LIST);\n  let typedTodoList: Todo[] = data ? data.getTodoList : null;\n  const [todoList, setTodoList] = useState(typedTodoList);\n  if (loading) return <p>Loading...</p>\n  if (error) {\n    console.log(error);\n    return <p>Error</p>\n  }\n  // If console log, notice the first iteration returns data as null, so do a single setState\n  if (data && !todoList) {\n      setTodoList(typedTodoList.map(todo => { return { ...todo, visible: true } }));\n  }\n\n  return (\n    <TodoWrapper>\n      <Header todoList={todoList} setTodoList={setTodoList}/>\n      <TodoList todoList={todoList} setTodoList={setTodoList}/>\n    </TodoWrapper>\n  );\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\r\nimport { split, ApolloClient, ApolloProvider, createHttpLink, InMemoryCache } from '@apollo/client';\r\nimport { WebSocketLink } from '@apollo/client/link/ws';\r\nimport { setContext } from '@apollo/client/link/context';\r\nimport App from './App';\r\nimport { getMainDefinition } from '@apollo/client/utilities';\r\n\r\nconst httpLink = createHttpLink({ uri: 'https://todo-app-server-expanded.herokuapp.com/graphql' });\r\nconst wsLink = new WebSocketLink({\r\n  uri: 'wss://todo-app-server-expanded.herokuapp.com/graphql',\r\n  options: {\r\n    reconnect: true\r\n  }\r\n});\r\n\r\nconst splitLink = split(\r\n  ({ query }) => {\r\n    const definition = getMainDefinition(query);\r\n    return (\r\n      definition.kind === 'OperationDefinition' &&\r\n      definition.operation === 'subscription'\r\n    );\r\n  },\r\n  wsLink,\r\n  httpLink\r\n);\r\n\r\nconst authLink = setContext((_, { headers }) => {\r\n  return {\r\n    headers: {\r\n      ...headers,\r\n      'Authorization': process.env.REACT_APP_TOKEN\r\n    }\r\n  }\r\n});\r\n\r\nconst client = new ApolloClient({\r\n  link: authLink.concat(splitLink),\r\n  cache: new InMemoryCache()\r\n});\r\n\r\nReactDOM.render(\r\n  <ApolloProvider client={client}>\r\n    <App />\r\n  </ApolloProvider>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}