{"version":3,"sources":["graphql/params/insertUpdateTodoParams.ts","graphql/queries/todoQueries.ts","graphql/mutations/todoMutations.ts","components/header/Header.tsx","components/todoList/TodoList.tsx","App.tsx","index.tsx"],"names":["InsertUpdateTodoParams","GET_TODO_LIST","gql","ADD_TODO","Id","Name","Info","DELETE_TODO","SET_EDITING","UPDATE_TODO","Header","todoList","setTodoList","useState","show","setShow","name","setName","info","setInfo","useMutation","insertTodo","clearFields","handleClose","style","display","justifyContent","margin","Button","variant","onClick","Modal","onHide","closeButton","Title","Body","className","value","onChange","event","target","Footer","preventDefault","newTodo","id","uuid_v4","editing","variables","TodoList","deleteMutation","setEditingMutation","updateTodoMutation","length","reduce","prev","curr","editingTodo","setEditingTodo","setEditing","editTodo","map","todo","onNameChange","onInfoChange","updateTodo","elem","disabled","filter","App","useQuery","loading","error","data","typedTodoList","getTodoList","console","log","httpLink","createHttpLink","uri","authLink","setContext","_","headers","process","client","ApolloClient","link","concat","cache","InMemoryCache","ReactDOM","render","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.4dc85246.chunk.js","sourcesContent":["export enum InsertUpdateTodoParams {\r\n  Id = 'id',\r\n  Name = 'name',\r\n  Info = 'info'\r\n}","import gql from 'graphql-tag';\r\n\r\nexport const GET_TODO_LIST = gql`\r\n  query GetTodoList {\r\n    getTodoList {\r\n      id\r\n      name\r\n      info\r\n      editing\r\n    }\r\n  }\r\n`;\r\n","import gql from 'graphql-tag';\r\nimport { InsertUpdateTodoParams } from '../params/insertUpdateTodoParams';\r\n\r\nexport const ADD_TODO = gql`\r\n  mutation addTodo(\r\n    $${InsertUpdateTodoParams.Id}: String!,\r\n    $${InsertUpdateTodoParams.Name}: String!,\r\n    $${InsertUpdateTodoParams.Info}: String\r\n  ) {\r\n    addTodo(todo: {\r\n      id: $${InsertUpdateTodoParams.Id},\r\n      name: $${InsertUpdateTodoParams.Name},\r\n      info: $${InsertUpdateTodoParams.Info}\r\n    }) {\r\n      id\r\n      name\r\n      info\r\n      editing\r\n    }\r\n  }\r\n`;\r\n\r\nexport const DELETE_TODO = gql`\r\n  mutation deleteTodo($id: String!) {\r\n    deleteTodo(id: $id) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nexport const SET_EDITING = gql`\r\n  mutation setEditing($id: String!, $editing: Boolean!) {\r\n    setEditing(id: $id, editing: $editing) {\r\n      id\r\n      name\r\n      info\r\n      editing\r\n    }\r\n  }\r\n`;\r\n\r\nexport const UPDATE_TODO = gql`\r\n  mutation updateTodo(\r\n    $${InsertUpdateTodoParams.Id}: String!,\r\n    $${InsertUpdateTodoParams.Name}: String!,\r\n    $${InsertUpdateTodoParams.Info}: String\r\n  ) {\r\n    updateTodo(todo: {\r\n      id: $${InsertUpdateTodoParams.Id},\r\n      name: $${InsertUpdateTodoParams.Name},\r\n      info: $${InsertUpdateTodoParams.Info}\r\n    }) {\r\n      id\r\n      name\r\n      info\r\n      editing\r\n    }\r\n  }\r\n`;","import React, { useState } from 'react';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { Todo, TodoStateInterface } from '../../todo-interface';\r\nimport { v4 as uuid_v4 } from 'uuid';\r\nimport { useMutation } from '@apollo/client';\r\nimport { ADD_TODO } from '../../graphql/mutations/todoMutations';\r\nimport { InsertUpdateTodoParams } from '../../graphql/params/insertUpdateTodoParams';\r\n\r\nconst Header: React.FC<TodoStateInterface> = ({ todoList, setTodoList }) => {\r\n  const [show, setShow] = useState(false);\r\n  const [name, setName] = useState('');\r\n  const [info, setInfo] = useState('');\r\n  const [insertTodo] = useMutation(ADD_TODO);\r\n\r\n  const clearFields = () => {\r\n    setName('');\r\n    setInfo('');\r\n  }\r\n\r\n  const handleClose = () => {\r\n    setShow(false);\r\n    clearFields();\r\n  }\r\n  const handleShow = () => setShow(true)\r\n\r\n  const onNameChange = (event: React.ChangeEvent<HTMLInputElement>) => setName(event.target.value)\r\n  const onInfoChange = (event: React.ChangeEvent<HTMLInputElement>) => setInfo(event.target.value)\r\n  \r\n  const addTodo = (event: React.SyntheticEvent) => {\r\n    event.preventDefault();\r\n    let newTodo: Todo = {\r\n      id: uuid_v4(),\r\n      name: name,\r\n      info: info,\r\n      editing: false\r\n    };\r\n    insertTodo({\r\n      variables: {\r\n        [InsertUpdateTodoParams.Id]: newTodo.id,\r\n        [InsertUpdateTodoParams.Name]: newTodo.name,\r\n        [InsertUpdateTodoParams.Info]: newTodo.info\r\n      }\r\n    });\r\n    clearFields();\r\n    setTodoList([...todoList, newTodo]);\r\n    setShow(false);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div style={{display: \"flex\", justifyContent: \"space-between\", margin: \"10px 10px\"}}>\r\n        <h1>Todo List Client</h1>\r\n        <Button variant=\"primary\" onClick={handleShow}>Add Todo</Button>\r\n      </div>\r\n      <Modal show={show} onHide={handleClose}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Add Todo</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <form className=\"add\">\r\n            <label style={{margin: \"0px 5px\"}}>Name</label>\r\n            <input value={name} onChange={onNameChange}/>\r\n            <label style={{margin: \"0px 5px\"}}>Info</label>\r\n            <input value={info} onChange={onInfoChange}/>\r\n          </form>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={handleClose}>\r\n            Cancel\r\n          </Button>\r\n          <Button variant=\"primary\" onClick={addTodo}>\r\n            Add\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  )\r\n};\r\n\r\nexport default Header;","import React, { useState } from 'react';\r\nimport { Todo, TodoStateInterface } from '../../todo-interface';\r\nimport { useMutation } from '@apollo/client';\r\nimport { DELETE_TODO, SET_EDITING, UPDATE_TODO } from '../../graphql/mutations/todoMutations';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { PencilSquare, Trash, Check, X } from 'react-bootstrap-icons';\r\n\r\nimport './TodoList.css';\r\n\r\nconst TodoList: React.FC<TodoStateInterface> = ({ todoList, setTodoList }) => {\r\n  const [deleteMutation] = useMutation(DELETE_TODO);\r\n  const [setEditingMutation] = useMutation(SET_EDITING);\r\n  const [updateTodoMutation] = useMutation(UPDATE_TODO);\r\n  const getPreviouslyEditingTodo = () => {\r\n    return todoList.length > 0 ? todoList.reduce((prev, curr) => {\r\n      // Previously found an updating todo, keep previous\r\n      if (prev.editing) return prev;\r\n      // Current todo is updating, update to current\r\n      if (curr.editing) return curr;\r\n      // Updating todo not found, set an empty todo\r\n      return { id: \"\", name: \"\", info: \"\", editing: false };\r\n    }) : { id: \"\", name: \"\", info: \"\", editing: false };\r\n  }\r\n  const [editingTodo, setEditingTodo] = useState(getPreviouslyEditingTodo());\r\n  const [editing, setEditing] = useState(false);\r\n\r\n  const deleteTodo = (id: string) => {\r\n    deleteMutation({ variables: { id: id }});\r\n    setTodoList(todoList.filter(todo => todo.id !== id));\r\n  }\r\n\r\n  const editTodo = (id: string, editing: boolean) => {\r\n    setEditing(editing);\r\n    setEditingMutation({ variables: { id: id, editing: editing }});\r\n    // Destructure object because we cannot directly change values in the state\r\n    setTodoList(todoList.map(todo => {\r\n      if (todo.id === id) {\r\n        let newTodo = { ...todo, editing: editing };\r\n        setEditingTodo(newTodo);\r\n        return newTodo;\r\n      }\r\n      return todo;\r\n    }));\r\n  }\r\n\r\n  const onNameChange = (event: React.ChangeEvent<HTMLInputElement>) => setEditingTodo({ ...editingTodo, name: event.target.value })\r\n  const onInfoChange = (event: React.ChangeEvent<HTMLInputElement>) => setEditingTodo({ ...editingTodo, info: event.target.value })\r\n\r\n  const updateTodo = () => {\r\n    updateTodoMutation({ variables: { id: editingTodo.id, name: editingTodo.name, info: editingTodo.info }});\r\n    setTodoList(todoList.map(todo => todo.id === editingTodo.id ? { id: editingTodo.id, name: editingTodo.name, info: editingTodo.info, editing: false } : todo));\r\n    setEditing(false);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"todoList header\">\r\n        <div>Name</div>\r\n        <div>Info</div>\r\n      </div>\r\n      {todoList.map((elem: Todo) => \r\n        !elem.editing ? (\r\n          <>\r\n            <hr/>\r\n            <div className=\"todoList\" key={elem.id}>\r\n              <div>{elem.name}</div>\r\n              <div>{elem.info}</div>\r\n              <Button variant=\"secondary\" onClick={() => editTodo(elem.id, true)} disabled={editing}><PencilSquare/></Button>\r\n              <Button variant=\"secondary\" onClick={() => deleteTodo(elem.id)}><Trash/></Button>\r\n            </div>\r\n          </>\r\n        ) : \r\n        (\r\n          <>\r\n            <hr/>\r\n            <div className=\"todoList\" key={elem.id}>\r\n              <input value={editingTodo.name} onChange={onNameChange}></input>\r\n              <input value={editingTodo.info} onChange={onInfoChange}></input>\r\n              <Button variant=\"secondary\" onClick={() => editTodo(elem.id, false)}><X/></Button>\r\n              <Button variant=\"primary\" onClick={updateTodo}><Check/></Button>\r\n            </div>\r\n          </>\r\n        )\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TodoList;","import React, { useState } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { GET_TODO_LIST } from './graphql/queries/todoQueries';\nimport { Todo } from './todo-interface';\n\nimport Header from './components/header/Header';\nimport TodoList from './components/todoList/TodoList';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst App: React.FC = () => {\n  const { loading, error, data, } = useQuery(GET_TODO_LIST);\n  let typedTodoList: Todo[] = data ? data.getTodoList : null;\n  const [todoList, setTodoList] = useState(typedTodoList);\n  if (loading) return <p>Loading...</p>\n  if (error) {\n    console.log(error);\n    return <p>Error</p>\n  }\n  // If console log, notice the first iteration returns data as null, so do a single setState\n  if (data && !todoList) setTodoList(typedTodoList);\n\n  return (\n    <div className=\"App\">\n      <Header todoList={todoList} setTodoList={setTodoList}/>\n      <TodoList todoList={todoList} setTodoList={setTodoList}/>\n    </div>\n  );\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport './index.css';\nimport { ApolloClient, ApolloProvider, createHttpLink, InMemoryCache } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport App from './App';\n\nconst httpLink = createHttpLink({ uri: 'https://ps-todo-app-server.herokuapp.com/' });\n\nconst authLink = setContext((_, { headers }) => {\n  return {\n    headers: {\n      ...headers,\n      'Authorization': process.env.REACT_APP_TOKEN\n    }\n  }\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache()\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}